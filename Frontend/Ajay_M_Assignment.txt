1.write a program using rest 
  case1:function name is MoreValues() pass atleast 5 values to a single paramter
  Answer
  =======
  let MoreValues = (...values)=>{
    console.log(values);
  }
  MoreValues(10,20,34,23,45,56);

  output
  =======
  [ 10, 20, 34, 23, 45, 56 ]


//case2: take 4 arrays that contains different datatype of values and merge thenm in a 2nd array
//spread operator
 Answer
 =====
 let arr1 = [1,2,3,4,5];
 let arr2 = [{id:1},{name:"Ajay"}]
 let arr3 = ["Apple","Orange","papaya","watermelon","StrawBerry"];
 let arr4 = [true,false];
 const result = [...arr2,arr1,arr3,arr4];
 console.log(result);
 output
 ======
[
  { id: 1 },
  { name: 'Ajay' },
  [ 1, 2, 3, 4, 5 ],
  [ 'Apple', 'Orange', 'papaya', 'watermelon', 'StrawBerry' ],
  [ true, false ]
]


--------------------------------------------------------------------------------------------------------------------
2.write a program to practice lexical scope
Answer
======
 let fun1=()=>{
    let a =10;
    let b = 20;
    let c= a+b;
    console .log(`sum of ${a} + ${b} is :`+(c));
    let fun2=(d)=>{
        let e = c*d;
        console.log(`Multiplication of ${c}+${d} is :`+ e) ;
    }
    fun2(6);
    
 }
 fun1();

 output
 ------
 sum of 10 + 20 is :30
 Multiplication of 30+6 is :180


-----------------------------------------------------------------------------------------------------
3.define 2 functions in one .js file and try to access them in another file
Answer
=======
data.js
-------
  export let fun1 = (firstName,lastName)=>{
      let StudentName= firstName+" "+lastName; 
      console.log(`Student Name :${StudentName}`)
  }
  export let fun2=(age,loc,course)=>{
      console.log(`Age          :${age}\nloc          :${loc}\ncourse       :${course}`);
  }

input.js
--------
  import * as inputTofun from'./data.js'
  const data=()=>{
    inputTofun.fun1("XXXXX", "XXXXXXX");
    inputTofun.fun2(23,"hyd","FSJ");

  }
  data();

  output
  -------
  Student Name :XXXXX XXXXXXX
  Age          :23
  loc          :hyd
  course       :FSJ

----------------------------------------------------------------------------------------------------------
4.define a function that need to perform opertaion in asynchronous format and wait until all objects came from 
collection
Instructions:
create a collection that contain atleast 10 object and perform all HTTP methods using axios+asyn/await*/
manual creating collection 
Answer:-
=========
It is not possible to perform all HTTP methods using axios+asyn/await for user defined colllection Object,
we need an API to perform those operations.

const users = [
  { id: 1, name: "vijay", age: 25, city: "Hyderabad" },
  { id: 2, name: "Kiran", age: 22, city: "Chennai" },
  { id: 3, name: "Sita", age: 28, city: "Mumbai" },
  { id: 4, name: "Rahul", age: 24, city: "Delhi" },
  { id: 5, name: "Anjali", age: 26, city: "Bangalore" },
  { id: 6, name: "Varun", age: 27, city: "Pune" },
  { id: 7, name: "Priya", age: 23, city: "Kolkata" },
  { id: 8, name: "Vikram", age: 30, city: "Jaipur" },
  { id: 9, name: "Meena", age: 21, city: "Ahmedabad" },
  { id: 10, name: "Ravi", age: 29, city: "Vizag" }
];
const data =(users)=>{
  return new Promise((resolve)=>{
    setTimeout(()=>{
      resolve(users)
    },1000)
  })

}

(async()=>{
  console.log("Retrieving Objects from Collection.......!" );
  let processData = users.map((sendData)=>data(sendData));
  let result = await Promise.all(processData);
  console.log(result);
  console.log("Retrieving objects completed...!")
})();
output
-------
Retrieving Objects from Collection.......!
[
  { id: 1, name: 'vijay', age: 25, city: 'Hyderabad' },
  { id: 2, name: 'Kiran', age: 22, city: 'Chennai' },
  { id: 3, name: 'Sita', age: 28, city: 'Mumbai' },
  { id: 4, name: 'Rahul', age: 24, city: 'Delhi' },
  { id: 5, name: 'Anjali', age: 26, city: 'Bangalore' },
  { id: 6, name: 'Varun', age: 27, city: 'Pune' },
  { id: 7, name: 'Priya', age: 23, city: 'Kolkata' },
  { id: 8, name: 'Vikram', age: 30, city: 'Jaipur' },
  { id: 9, name: 'Meena', age: 21, city: 'Ahmedabad' },
  { id: 10, name: 'Ravi', age: 29, city: 'Vizag' }
]
Retrieving objects completed...!


-----------------------------------------------------------------------------------------------------------------
5.what is axios and fetch how to differntiate those?
Answer using fetch
==================
fetch('https://api-crud-1-g7uq.onrender.com/api/users')
  .then(res => res.json())
  .then(data => console.log(data))
  .catch(err => console.error('Error:', err));
  1)It is Built-in in modern browsers and Node.js (no installation needed).
  2)You must manually convert response to JSON using .json()
  3)No automatic error handling for HTTP errors (like 404 or 500).
  4)Less concise syntax for things like timeouts, interceptors, etc.
using axios
===========
  const axios = require('axios');
  axios.get('https://api-crud-1-g7uq.onrender.com/api/users')
    .then(response => {
     console.log(response.data); // This will print the list of users
    })
    .catch(error => {
      console.error('Error:', error.message); // Handles any errors
    });
   1)It is Third-party library (must install: npm install axios).
   2)Automatically parses JSON â€“ no need to use .json().
   3)Automatically handles HTTP error statuses.
   4)Supports interceptors, request cancellation, timeout, and more.
   5)Works on both browser and Node.js.

Both code output is same
------------------------
[
  {
    id: 1,
    name: 'Ajay',
    email: 'ajay@gmail.com',
    age: 25,
    city: 'Hyderabad',
    role: 'Developer'
  },
  {
    id: 2,
    name: 'Kiran',
    email: 'kiran@gmail.com',
    age: 27,
    city: 'Bangalore',
    role: 'Tester'
  },
  {
    id: 1751095597385,
    name: 'vijay',
    email: 'vijay@gmail.com',
    age: 25,
    city: 'Hyderabad',
    role: 'Developer'
  },
  {
    id: 1751095598100,
    name: 'Kiran',
    email: 'kiran@gmail.com',
    age: 27,
    city: 'Bangalore',
    role: 'Tester'
  },
  {
    id: 1751095598388,
    name: 'Sneha',
    email: 'sneha@gmail.com',
    age: 24,
    city: 'Chennai',
    role: 'Designer'
  },
  {
    id: 1751095598667,
    name: 'Ravi',
    email: 'ravi@gmail.com',
    age: 28,
    city: 'Mumbai',
    role: 'Manager'
  },
  {
    id: 1751095598957,
    name: 'Pooja',
    email: 'pooja@gmail.com',
    age: 26,
    city: 'Delhi',
    role: 'Analyst'
  },
  {
    id: 1751095599248,
    name: 'Vikram',
    email: 'vikram@gmail.com',
    age: 31,
    city: 'Pune',
    role: 'DevOps'
  },
  {
    id: 1751095599506,
    name: 'Neha',
    email: 'neha@gmail.com',
    age: 22,
    city: 'Kolkata',
    role: 'Intern'
  },
  {
    id: 1751095599788,
    name: 'Arjun',
    email: 'arjun@gmail.com',
    age: 29,
    city: 'Ahmedabad',
    role: 'Engineer'
  },
  {
    id: 1751095600076,
    name: 'Divya',
    email: 'divya@gmail.com',
    age: 23,
    city: 'Noida',
    role: 'HR'
  },
  {
    id: 1751095600388,
    name: 'Manish',
    email: 'manish@gmail.com',
    age: 30,
    city: 'Jaipur',
    role: 'Team Lead'
  }
]

--------------------------------------------------------------------------------------------------------
6.what is Regularexpression and write email validations and mobile validation without HTML integration?

Answer
======
A Regular Expression (RegEx) is a sequence of characters that forms a search pattern. It's used to:
* Match patterns in strings
* Validate user input (email, phone, etc.)
* Search/replace operations

email validations and mobile validation without HTML integration?
----------------------------------------------------------------

Answer:-
without (End-User input)Frontend technologies(like HTML & React) it is not possible to perfrom validation.
but we can perform some tests in server with the help of node js.
Email validation
=================
const validateEmail = (email) => {
  const regex = /^[a-zA-Z0-9._%+-]+@gmail\.com$/; 
  return regex.test(email);
};

// Test
console.log(validateEmail("user@gmail.com")); // true
console.log(validateEmail("user@yahoo.com")); // false
console.log(validateEmail("user@.com"));      // false

mobile validation
=================
const validateMobile = (mobile) => {
  const regex = /^[6-9]\d{9}$/;
  return regex.test(mobile);
};

// Test
console.log(validateMobile("9876543210")); // true
console.log(validateMobile("1234567890")); // false
console.log(validateMobile("98765"));      // false



